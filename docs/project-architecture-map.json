{
  "project_name": "Draw Battles Online",
  "description": "Real-time multiplayer drawing game built with Flask-SocketIO, HTML5 Canvas, and vanilla JavaScript",
  "tech_stack": {
    "backend": "Python Flask + Flask-SocketIO with eventlet",
    "frontend": "HTML5 Canvas + vanilla JavaScript + CSS3",
    "realtime": "WebSocket via Socket.IO",
    "testing": "pytest with WebSocket testing support",
    "deployment": "Designed for platforms like Render, Railway, or PythonAnywhere"
  },
  "development_status": {
    "current_phase": "Week 3 - Game Mechanics Implementation",
    "completed": "Week 1-2 MVP - Real-time collaborative drawing foundation",
    "next": "Game prompts, scoring, turn-based gameplay"
  },
  "file_architecture": {
    "root_level": {
      "app.py": {
        "purpose": "Main Flask-SocketIO server application",
        "description": "Handles HTTP routes, WebSocket events, room management, player connections, and game flow coordination. Contains all socket event handlers for real-time communication.",
        "key_features": ["Room creation/joining", "Drawing data broadcast", "Game state management", "Timer management", "Player lifecycle"]
      },
      "requirements.txt": {
        "purpose": "Python dependencies specification",
        "description": "Lists all required Python packages for the project including Flask, Flask-SocketIO, eventlet for async support, and development tools.",
        "key_packages": ["Flask>=2.3.0", "Flask-SocketIO>=5.3.0", "eventlet>=0.33.0", "pytest>=7.4.0"]
      },
      "pyproject.toml": {
        "purpose": "Project configuration and metadata",
        "description": "Contains configuration for code formatting (black), import sorting (isort), linting (pylint), type checking (mypy), and testing (pytest).",
        "tools_configured": ["black", "isort", "pylint", "mypy", "pytest"]
      },
      "pytest.ini": {
        "purpose": "pytest testing configuration",
        "description": "Configures pytest behavior including test discovery patterns, markers, and command-line options for the test suite.",
        "settings": ["Test paths", "Markers for slow/integration/unit tests", "Strict configuration"]
      },
      "run_tests.py": {
        "purpose": "Test runner script",
        "description": "Convenient script to run the entire test suite with proper configuration, coverage reporting, and colored output.",
        "features": ["Coverage reporting", "Verbose output", "HTML coverage reports"]
      },
      "README.md": {
        "purpose": "Project documentation and overview",
        "description": "Comprehensive project documentation including setup instructions, feature descriptions, development roadmap, and achievement milestones.",
        "sections": ["Project overview", "Setup instructions", "Feature documentation", "Development roadmap"]
      }
    },
    "game_directory": {
      "path": "game/",
      "purpose": "Modular game logic package",
      "description": "Contains all game-specific logic separated from the Flask application, enabling clean separation of concerns and easier testing.",
      "files": {
        "__init__.py": {
          "purpose": "Python package initialization",
          "description": "Marks the directory as a Python package and contains package metadata.",
          "content": "Package version and author information"
        },
        "state.py": {
          "purpose": "Game state management system",
          "description": "Handles game phases, player turns, scoring, round progression, and overall game flow. Contains the GameState class and GamePhase enum.",
          "key_classes": ["GameState", "GamePhase"],
          "features": ["Player management", "Round progression", "Scoring system", "Turn-based gameplay", "Game phase transitions"]
        },
        "prompts.py": {
          "purpose": "Drawing prompts database and management",
          "description": "Contains word database organized by category and difficulty, manages prompt selection, guess validation, and round-specific prompt tracking.",
          "key_classes": ["PromptsManager"],
          "features": ["Word database (animals, objects, actions, food)", "Difficulty levels (easy, medium, hard)", "Guess validation with typo tolerance", "Used prompt tracking"]
        }
      }
    },
    "static_directory": {
      "path": "static/",
      "purpose": "Frontend static assets",
      "description": "Contains all client-side assets including stylesheets and JavaScript files for the drawing application.",
      "subdirectories": {
        "css/": {
          "style.css": {
            "purpose": "Main stylesheet for the application",
            "description": "Comprehensive CSS with responsive design, drawing interface styling, game UI components, and mobile-first approach.",
            "features": ["Responsive grid layouts", "Drawing tool styling", "Game status indicators", "Mobile touch support", "Modern gradient designs"]
          }
        },
        "js/": {
          "drawing.js": {
            "purpose": "Client-side drawing and game logic",
            "description": "Main JavaScript class (DrawingApp) handling HTML5 Canvas drawing, WebSocket communication, game state management, and user interactions.",
            "key_classes": ["DrawingApp"],
            "features": ["Canvas drawing with touch support", "Real-time WebSocket communication", "Game state synchronization", "Drawing tools control", "Timer management", "Player role management"]
          }
        }
      }
    },
    "templates_directory": {
      "path": "templates/",
      "purpose": "Flask HTML templates",
      "description": "Jinja2 templates for server-side rendering of the web interface.",
      "files": {
        "index.html": {
          "purpose": "Welcome screen template",
          "description": "Landing page with room creation and joining functionality. Contains the main entry point for users to start or join games.",
          "features": ["Room creation interface", "Room joining form", "Socket.IO client setup", "Responsive welcome design"]
        },
        "room.html": {
          "purpose": "Drawing room interface template",
          "description": "Main game interface containing the drawing canvas, game controls, player list, chat/guess interface, and all game-related UI components.",
          "features": ["HTML5 Canvas element", "Drawing tools controls", "Game status displays", "Player list and scores", "Guess submission interface", "Timer display"]
        }
      }
    },
    "tests_directory": {
      "path": "tests/",
      "purpose": "Comprehensive test suite",
      "description": "Complete testing framework covering Flask routes, WebSocket functionality, real-time drawing, room management, and integration scenarios.",
      "files": {
        "__init__.py": {
          "purpose": "Test package initialization",
          "description": "Marks tests directory as Python package for proper test discovery."
        },
        "conftest.py": {
          "purpose": "Pytest configuration and shared fixtures",
          "description": "Contains shared test fixtures for Flask client, SocketIO client, room cleanup, and sample room creation.",
          "fixtures": ["client", "socket_client", "clean_rooms", "sample_room"]
        },
        "README.md": {
          "purpose": "Test suite documentation",
          "description": "Comprehensive documentation of test structure, coverage areas, running instructions, and test strategy.",
          "sections": ["Test structure", "Coverage goals", "Running instructions", "Example test patterns"]
        },
        "test_app_basic.py": {
          "purpose": "Basic Flask application tests",
          "description": "Tests for HTTP routes, page rendering, and basic Flask functionality.",
          "coverage": ["Index page loading", "Room page rendering", "Room code generation"]
        },
        "test_room_management.py": {
          "purpose": "Room management functionality tests",
          "description": "Tests for room creation, joining, player tracking, and room lifecycle management.",
          "coverage": ["Room creation", "Room joining", "Player management", "Error handling"]
        },
        "test_drawing_functionality.py": {
          "purpose": "Drawing and canvas operation tests",
          "description": "Tests for real-time drawing synchronization, canvas state persistence, and drawing-related WebSocket events.",
          "coverage": ["Real-time drawing broadcast", "Canvas state replay", "Canvas clearing", "Drawing data validation"]
        },
        "test_integration.py": {
          "purpose": "Integration and end-to-end tests",
          "description": "Tests for complete user workflows, multi-player scenarios, and complex interaction patterns.",
          "coverage": ["End-to-end workflows", "Multi-player synchronization", "Performance testing", "Error scenario handling"]
        }
      }
    },
    "docs_directory": {
      "path": "docs/",
      "purpose": "Project documentation and assets",
      "description": "Contains all project documentation, demos, product requirements, and development planning materials.",
      "files": {
        "PRD-drawing-battle-game.md": {
          "purpose": "Product Requirements Document",
          "description": "Comprehensive product specification including features, technical requirements, development milestones, and project scope.",
          "sections": ["Project overview", "Technical requirements", "Feature specifications", "Development timeline"]
        },
        "Phase1-Development-Plan.md": {
          "purpose": "Development planning document",
          "description": "Detailed development plan for Phase 1 implementation with milestones and technical decisions."
        },
        "PRD-template.md": {
          "purpose": "Product requirements template",
          "description": "Template for creating product requirement documents for future features or projects."
        },
        "PRD-example.md": {
          "purpose": "Example product requirements document",
          "description": "Example PRD showing proper format and content structure."
        },
        "Week_1-2_Milestone_Demo.gif": {
          "purpose": "Milestone demonstration (GIF format)",
          "description": "Visual demonstration of Week 1-2 milestone achievements showing real-time collaborative drawing functionality."
        },
        "Week_1-2_Milestone_Demo.mp4": {
          "purpose": "Milestone demonstration (video format)",
          "description": "Full HD video demonstration of the completed Week 1-2 MVP functionality."
        },
        "project-architecture-map.json": {
          "purpose": "Project architecture documentation",
          "description": "This file - comprehensive JSON map of the entire project structure, file purposes, and architectural overview."
        }
      }
    },
    "chat_history_directory": {
      "path": "chat-history/",
      "purpose": "Development session logs",
      "description": "Contains exported conversation histories from development sessions, serving as detailed project development documentation.",
      "files": {
        ".gitkeep": {
          "purpose": "Directory placeholder",
          "description": "Ensures the chat-history directory is tracked in git even when empty."
        },
        "chat-history-2025-06-30-210359.md": {
          "purpose": "Development session log",
          "description": "Detailed log of development session covering specific features, decisions, and implementation details."
        },
        "chat-history-2025-06-30-235900.md": {
          "purpose": "Development session log",
          "description": "Another development session record with implementation progress and technical decisions."
        }
      }
    }
  },
  "key_architectural_patterns": {
    "separation_of_concerns": {
      "description": "Clean separation between Flask server logic, game mechanics, frontend, and testing",
      "implementation": "Game logic in separate modules, static assets organized by type, comprehensive test coverage"
    },
    "real_time_communication": {
      "description": "WebSocket-based real-time synchronization for drawing and game state",
      "implementation": "Flask-SocketIO for server-side WebSocket handling, Socket.IO client for frontend communication"
    },
    "modular_game_logic": {
      "description": "Game mechanics separated into reusable modules",
      "implementation": "game.state for game flow, game.prompts for word management, clean APIs between modules"
    },
    "comprehensive_testing": {
      "description": "Full test coverage including WebSocket testing and integration scenarios",
      "implementation": "Separate test files by concern, shared fixtures, WebSocket test clients"
    },
    "responsive_design": {
      "description": "Mobile-first responsive design with touch support",
      "implementation": "CSS Grid/Flexbox layouts, touch event handling, responsive canvas sizing"
    }
  },
  "data_flow": {
    "client_to_server": "User interactions → JavaScript events → WebSocket emissions → Flask-SocketIO handlers → Game state updates",
    "server_to_client": "Game state changes → WebSocket broadcasts → JavaScript event handlers → DOM/Canvas updates",
    "drawing_synchronization": "Canvas events → Drawing data → WebSocket broadcast → Remote canvas rendering",
    "game_progression": "Game state transitions → Timer management → Player role updates → UI synchronization"
  },
  "current_implementation_status": {
    "completed_features": [
      "Real-time collaborative drawing",
      "Room management with unique codes",
      "Canvas state persistence",
      "Mobile touch support",
      "Player tracking and management",
      "WebSocket communication framework",
      "Comprehensive test suite",
      "Responsive UI design"
    ],
    "in_progress_features": [
      "Drawing prompts system",
      "Turn-based gameplay",
      "Scoring mechanism",
      "Game timer functionality",
      "Winner determination"
    ],
    "planned_features": [
      "Advanced game modes",
      "User accounts",
      "Tournament system",
      "Enhanced drawing tools"
    ]
  }
} 